<?xml version="1.0"?>

<!DOCTYPE project [
    <!ENTITY properties SYSTEM "file:../properties.xml">
    <!ENTITY taskdef SYSTEM "file:../taskdef.xml">
]>

<!-- ===========================================================================
 | This is the build file for the Bright Side Remoting project.
 | The default task makes the distribution which consists in the client jar
 | and the server war.
 | Be carefull that to run the test tasks, you must have built the
 | bsf-ejb-commons.jar before.
 | The test are provided for JBoss 3.2.1 and JOnAS 3.3.
 |
 =========================================================================== -->
<project name="bsf-remoting" default="default">

    <!-- import external XML fragments -->
    &properties;
    &taskdef;

    <property environment="myenv"/>

    <property name="jonas.root" value="${myenv.JONAS_ROOT}"/>


    <property name="test.jboss.name" value="test-jboss-remote"/>
    <property name="test.jbos.app" location="${metadata.dir}/test-jboss-app.xml"/>

    <property name="test.jonas.name" value="test-jonas-remote"/>
    <property name="test.jonas.app" location="${metadata.dir}/test-jonas-app.xml"/>


    <path id="compile.classpath">
        <pathelement location="${j2ee.jar}"/>
        <pathelement location="${commons-codec.jar}"/>
        <pathelement location="${servlet.jar}"/>
        <pathelement location="${jbosssx.jar}"/>
        <pathelement location="${logging.jar}"/>
    </path>

    <path id="test.classpath">
        <path refid="compile.classpath"/>
        <pathelement location="${build.dir}/classes"/>
        <pathelement location="${build.dir}/test"/>
        <pathelement location="${bsf-tools.jar}"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${jboss-jnp-client.jar}"/>
        <pathelement location="${jboss-commons-client.jar}"/>
        <pathelement location="${bsf-commons-ejb.jar}"/>
    </path>


    <!-- ================================================================== -->
    <!-- Public targets                                                     -->
    <!-- ================================================================== -->


    <target name="default" depends="dist"
        description="default : buid the remote jar."/>

    <target name="test" depends="compile,test-init,run-tests"/>

    <target name="docs" depends="javadocs"/>

    <!-- Public Targets -->
    <target name="clean"
        description="Deletes all files that are generated by the build.">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${javadoc.dir}"/>
        <delete>
            <fileset dir="${root.dir}">
                <include name="junit*.properties"/>
                <include name="*.zip"/>
            </fileset>
        </delete>
    </target>

    <target name="dist" depends="compile,make-war,jar-client"
        description="creat a distribution">
    </target>


    <!-- ================================================================== -->
    <!-- Private targets                                                    -->
    <!-- ================================================================== -->


    <target name="init">
        <mkdir dir="${build.dir}/classes"/>
        <mkdir dir="${build.dir}/test"/>
        <mkdir dir="${dist.dir}"/>
        <echo message="Building ${ant.project.name}"/>
    </target>



    <!-- =======================================================================
    | Compile :
    |   compile the source and copy the ressources
    |   to the classes dir
    ======================================================================== -->
    <target name="compile" depends="init">

        <property name="path.string" refid="compile.classpath"/>
        <echo message="${path.string}"/>
        <javac destdir="${build.dir}/classes"
            debug="${build.debug}"
            includeAntRuntime="false"
            srcdir="src/main">
            <classpath refid="compile.classpath"/>
        </javac>

        <copy todir="${build.dir}/classes">
            <fileset dir="src/main">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
        </copy>
    </target>


    <!-- =======================================================================
    | Jar-client :
    |   Build the client jar. This jar don't contains the
    |   specific Server classes
    ======================================================================== -->
    <target name="jar-client" depends="compile">

        <unjar dest="${build.classes.dir}" src="${commons-codec.jar}">
            <patternset>
                <include name="**/BinaryDecoder.class"/>
                <include name="**/BinaryEncoder.class"/>
                <include name="**/Encoder.class"/>
                <include name="**/Decoder.class"/>
                <include name="**/DecoderException.class"/>
                <include name="**/EncoderException.class"/>
                <include name="**/Base64.class"/>
            </patternset>
        </unjar>

        <jar destfile="${dist.dir}/bsf-remote-client.jar"
            basedir="${build.classes.dir}">
            <exclude name="**/*Server.class"/>
            <exclude name="**/JBoss*.class"/>
        </jar>

    </target>

    <!-- =======================================================================
    | make-war :
    |   Make the war using the web.xml file.
    ======================================================================== -->
    <target name="make-war" depends="compile">
        <war destfile="${dist.dir}/bsf-remote-server.war"
            compress="false"
            webxml="src/web/web.xml">
            <classes dir="${build.classes.dir}"/>
            <lib file="${logging.jar}"/>
        </war>

    </target>

    <!-- =======================================================================
    | javadocs :
    |   Generates the javadoc of the project.
    ======================================================================== -->
    <target name="javadocs" depends="compile" description="make the java docs">
        <mkdir dir="${javadoc.dir}"/>
        <javadoc author="true"
            destdir="${javadoc.dir}"
            packagenames="org.bsf.remoting.*"
            sourcepath="src/main"
            use="true"
            version="true"
            windowtitle="BSF Framework remoting"
            private="true"
            >
            <classpath refid="compile.classpath"/>
        </javadoc>
    </target>

    <!-- =======================================================================
    | Makes the project release :
    |   Prepares the directory for a delivery
    ======================================================================== -->
    <target name="release" depends="dist, javadocs">
        <delete dir="${build.dir}"/>
        <zip basedir="${masterbuild.dir}"
            includes="remoting/**"
            excludes="**/*.zip"
            destfile="remoting-${remoting.version}.zip"
            update="true">
        </zip>

    </target>


    <!-- =======================================================================
    | deploy :
    |   deploys the war in JBoss using the environment variable
    ======================================================================== -->
    <target name="deploy" depends="dist">
        <copy file="${dist.dir}/bsf-remote-server.war" todir="${env.JBOSS_SERVER}/deploy"/>
    </target>

    <!-- =======================================================================
    | undeploy :
    |   Undeploy the war from JBoss
    ======================================================================== -->
    <target name="undeploy">
        <delete file="${env.JBOSS_SERVER}/deploy/bsf-remote-server.war"/>
    </target>


    <target name="test-init" depends="init">
        <mkdir dir="${build.dir}/test"/>
        <mkdir dir="${build.dir}/test"/>
        <mkdir dir="${test.data.dir}"/>
        <mkdir dir="${test.reports.dir}"/>

        <echo message="Building ${ant.project.name}"/>
    </target>


    <!-- =======================================================================
    | test-ejbdoclet :
    |   Generates all the mandatory code to deploy an EJB to perform the tests.
    |   The generated classes are remote and home interfaces, and the deployment
    |   files.
    ======================================================================== -->
    <target name="test-ejbdoclet" depends="init">

        <ejbdoclet
            destdir="${build.dir}/ejb"
            excludedtags="@version,@author,@todo"
            ejbspec="2.0"
            verbose="true"
            >

            <fileset dir="src/test">
                <include name="**/*Bean.java"/>
            </fileset>

            <remoteinterface/>
            <homeinterface/>
            <localinterface/>
            <localhomeinterface/>
            <deploymentdescriptor/>
            <jboss
                version="3.2"
                validatexml="true"/>
            <jonas
                version="3.2"
                validatexml="true"/>
        </ejbdoclet>

    </target>

    <!-- =======================================================================
    | Compile :
    |   compile the test sources and copy the ressources
    |   to the classes dir.
    ======================================================================== -->
    <target name="test-compile" depends="compile, test-init, test-ejbdoclet">

        <javac destdir="${build.dir}/test"
            debug="${build.debug}"
            includeAntRuntime="false"
            srcdir="${src.dir}/test;${build.dir}/ejb">
            <classpath refid="test.classpath"/>
        </javac>
        <!--        <copy todir="${build.dir}/test/META-INF">-->
        <!--            <fileset dir="build/ejb">-->
        <!--                <include name="**/*.xml"/>-->
        <!--            </fileset>-->
        <!--        </copy>-->
    </target>


    <!-- =======================================================================
    | test-dependency :
    |   Prepares the inclusion of the classes needed by the EJB.
    ======================================================================== -->
    <target name="test-dependency" depends="init">
        <unjar src="${bsf-commons-ejb.jar}" dest="build/test"/>
    </target>



    <!-- =================================================================== -->
    <!-- JBOSS TESTS                                                     === -->
    <!-- =================================================================== -->

    <!-- =======================================================================
    | test-jboss-jar :
    |   makes the jar that contains the EJB to perform the tests in JBoss Server.
    ======================================================================== -->
    <target name="test-jboss-jar" depends="test-compile,test-dependency">
        <copy todir="build/test">
            <fileset dir="src/test">
                <include name="images/**"/>
            </fileset>
        </copy>

        <manifest file="build/test/test.manifest">
            <attribute name="Class-Path" value="bsf-remote-images.jar"/>
        </manifest>


        <ejbjar
            srcdir="build/test"
            descriptordir="${build.dir}/ejb"
            basejarname="${test.jboss.name}"
            dependency="full"
            manifest="build/test/test.manifest">
            <dtd publicid="${ejb2_0.id}" location="${ejb2_0.dtd}"/>
            <jboss destdir="${dist.dir}"/>
            <include name="**/*.xml"/>
            <exclude name="**/jonas-*.xml"/>
            <exclude name="**/jboss*.xml"/>
            <exclude name="**/build.xml"/>

        </ejbjar>
    </target>

    <!-- =======================================================================
    | test-images-jar :
    |   makes the jar that contains the displayed images.
    |   this jar must be included in the server classpath
    ======================================================================== -->
    <target name="test-images-jar">
        <jar destfile="${dist.dir}/bsf-remote-images.jar"
            basedir="src/test">
            <include name="images/**"/>
        </jar>
    </target>

    <!-- =======================================================================
    | test-client-jar :
    |   makes the jar that contains the EJB interfaces and test objects.
    ======================================================================== -->
    <target name="test-client-jar" depends="test-compile">
        <jar destfile="${dist.dir}/bsf-remote-test-client.jar"
            basedir="build/test">
            <include name="org/bsf/remoting/**"/>
            <exclude name="**/*Bean.class"/>
            <exclude name="**/Test*.class"/>
        </jar>
    </target>

    <!-- =======================================================================
    | test-jboss-ear :
    |   Packages the test application in an EAR. Any J2EE application should
    |   use this kind of deployment.
    ======================================================================== -->
    <target name="test-jboss-ear" depends="test-jboss-jar,make-war,test-images-jar">
        <ear destfile="${dist.dir}/${test.jboss.name}.ear"
            appxml="src/metadata/test-jboss-app.xml">
            <fileset dir="dist" includes="bsf-remote-server.war"/>
            <fileset dir="dist" includes="${test.jboss.name}.jar"/>
            <fileset dir="dist" includes="bsf-remote-images.jar"/>
        </ear>
    </target>

    <!-- =======================================================================
    | test-jboss-deploy :
    |   Deploy the ear in JBoss using the environment variable.
    ======================================================================== -->
    <target name="test-jboss-deploy" depends="test-jboss-ear">
        <copy todir="${env.JBOSS_SERVER}/deploy" file="${dist.dir}/${test.jboss.name}.ear"/>
    </target>

    <!-- =======================================================================
    | test-jboss-undeploy :
    |   Undeploys the test-ear
    ======================================================================== -->
    <target name="test-jboss-undeploy">
        <delete file="${env.JBOSS_SERVER}/deploy/${test.jboss.name}.ear"/>
    </target>



    <!-- =======================================================================
    | run-tests:
    |   Runs the tests, and generates reports.
    ======================================================================== -->
    <target name="run-tests" depends="test-init">
        <junit printsummary="false"
            errorProperty="test.failed"
            failureProperty="test.failed"
            fork="true"
            >
            <classpath refid="test.classpath"/>
            <sysproperty key="org.apache.commons.logging.Log" value="org.apache.commons.logging.impl.SimpleLog"/>
            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>
            <!--        <test name="${testcase}" if="testcase"/>-->
            <batchtest todir="${test.data.dir}" unless="testcase">
                <fileset dir="${test.dir}" includes="**/Test*.class"/>
            </batchtest>
        </junit>

        <junitreport todir="${test.data.dir}">
            <fileset dir="${test.data.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.reports.dir}"/>
        </junitreport>

        <fail message="Unit tests failed.  Check log or reports for details" if="test.failed"/>
    </target>


    <!-- =================================================================== -->
    <!-- JONAS TESTS                                                     === -->
    <!-- =================================================================== -->

    <!-- =======================================================================
    | test-jonas-jar :
    |   makes the jar that contains the EJB to perform the tests in JOnAS Server.
    ======================================================================== -->
    <target name="test-jonas-jar" depends="test-compile,test-dependency">

        <jonas-ejbjar
            srcdir="build/test"
            descriptordir="${build.dir}/ejb"
            basejarname="${test.jonas.name}"
            dependency="full">
            <!--          <dtd publicId="-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 2.0//EN"-->
            <!--           location="${jonas.root}/xml/ejb-jar_2_0.dtd" />-->
            <jonas destdir="dist"
                jonasroot="${jonas.root}"
                protocols="jrmp"
                keepgenerated="false"
                verbose="false"
                mappernames="rdb.oracle8,rdb.mysql">
            </jonas>
            <dtd publicId="${ejb2_0.id}"
                location="${ejb2_0.dtd}"/>

            <include name="**/*.xml"/>
            <exclude name="**/jonas-*.xml"/>
            <exclude name="**/jboss*.xml"/>
            <exclude name="**/build.xml"/>
        </jonas-ejbjar>
    </target>


    <!-- =======================================================================
    | test-jonas-ear :
    |   Packages the test application in an EAR. Any J2EE application should
    |   use this kind of deployment.
    ======================================================================== -->
    <target name="test-jonas-ear" depends="test-jonas-jar,make-war">
        <ear destfile="${dist.dir}/test-jonas-remote.ear"
            appxml="src/metadata/test-jonas-app.xml">

            <fileset dir="dist" includes="bsf-remote-server.war"/>
            <fileset dir="dist" includes="test-jonas-remote.jar"/>
        </ear>
    </target>

    <!-- =======================================================================
    | test-jonas-deploy :
    |   Copy the ear in JOnAS apps directory using the environment variable.
    |   You should then use the admin console to validate the deployment.
    ======================================================================== -->
    <target name="test-jonas-deploy" depends="test-jonas-ear">
        <copy todir="${jonas.root}/apps" file="${dist.dir}/${test.jonas.name}.ear"/>
    </target>

</project>
